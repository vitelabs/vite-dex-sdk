package org.vite.dex.client;import org.junit.Ignore;import org.junit.Test;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.vite.dex.client.bean.enums.KlineInterval;import org.vite.dex.client.bean.enums.QuoteTokenCategory;import org.vite.dex.client.bean.enums.TokenCategory;import org.vite.dex.client.bean.http.HistoricalOrdersRequest;import org.vite.dex.client.bean.http.KLineRequest;import org.vite.dex.client.bean.http.OpenOrderRequest;import org.vite.dex.client.bean.http.TradeRequest;import java.util.concurrent.TimeUnit;@Ignorepublic class AsyncRequestClientTest {    private static final Logger logger = LoggerFactory.getLogger(AsyncRequestClientTest.class);    AsyncRequestClient asyncRequestClient = DexClientFactory.asyncRequestClient().serverUrl("https://vitex.vite.net/test").build();    @Test    public void getLatestDepth() {        asyncRequestClient.getLatestDepth("VTT-000_VITE", 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getLimit() {        asyncRequestClient.getLimit(t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokens() {        //获取所有币种        asyncRequestClient.getTokens(0, 100, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokensByCategory() {        //获取计价币种        asyncRequestClient.getTokens(TokenCategory.QUOTE, null, 0, 100, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokensBySymbolLike() {        //搜索币种        asyncRequestClient.getTokens(TokenCategory.ALL, "GRIN", 0, 100, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokenDetailByTokenId() {        asyncRequestClient.getTokenDetailByTokenId("tti_289ee0569c7d3d75eac1b100", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokenDetailBySymbol() {        asyncRequestClient.getTokenDetailBySymbol("VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokenMapped() {        //已开通交易对        asyncRequestClient.getTokenMapped("VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTokenUnmapped() {        //未开通交易对        asyncRequestClient.getTokenUnmapped("VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getMarkets() {        //获取所有市场        asyncRequestClient.getMarkets(0, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getBestBookTicker() {        asyncRequestClient.getBestBookTicker("GRIN-000_VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getExchangeRateByTokenIds() {        //获取token汇率        asyncRequestClient.getExchangeRateByTokenIds("tti_289ee0569c7d3d75eac1b100,tti_5649544520544f4b454e6e40", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getExchangeRate() {        //获取token汇率        asyncRequestClient.getExchangeRate("VITE,GRIN-000", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getUsd2Cny() {        //人民币对美元汇率        asyncRequestClient.getUsd2Cny(t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getServerTime() {        //获取API服务器时间        asyncRequestClient.getServerTime(t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getClosedMarkets() {        //获取已关闭的市场        asyncRequestClient.getClosedMarkets(t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getMarketStatus() {        //获取市场状态        asyncRequestClient.getMarketStatus("GRIN-000_VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getLatestKline() {        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Minute, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Minute30, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Hour, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Hour6, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Hour12, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Day, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        //获取最新的kline        asyncRequestClient.getLatestKline("GRIN-000_VITE", KlineInterval.Week, 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getHistoricalKline() {        asyncRequestClient.getHistoricalKline(new KLineRequest("GRIN-000_VITE", KlineInterval.Week, null, null, 10), t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getLatestTrade() {        asyncRequestClient.getLatestTrade("GRIN-000_VITE", 10, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getHistoricalTrade() {        //历史成交记录        asyncRequestClient.getHistoricalTrade(new TradeRequest("GRIN-000_VITE", null, null, null, (byte) 0, null, null, null), t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getOrderTrade() {        asyncRequestClient.getOrderTrade("GRIN-000_VITE", "00000900ffffffffa4ffffffffff005d3be6e0000000", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getWithdrawAndDepositHistory() {        asyncRequestClient.getWithdrawAndDepositHistory("vite_a6f541b21ff15e0b42fc3ac37df2e38e27f4b548498e8d2c9a", "tti_5649544520544f4b454e6e40", null, null, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getOrder() {        asyncRequestClient.getOrder("vite_efeccc7f8c776b6e7fdedcf145bf560e32cef368514480b2df", "00000900ffffffffa4ffffffffff005d3e97ee000001", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getOpenOrders() {        asyncRequestClient.getOpenOrders(new OpenOrderRequest("vite_efeccc7f8c776b6e7fdedcf145bf560e32cef368514480b2df", null, null, null, null, true), t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getHistoricalOrders() {        //0:buy,1:sell        asyncRequestClient.getHistoricalOrders(new HistoricalOrdersRequest("vite_efeccc7f8c776b6e7fdedcf145bf560e32cef368514480b2df", null, null, null, null, null, null, null, null, false), t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTickersByQuoteTokenCategory() {        asyncRequestClient.getTickersByQuoteTokenCategory(QuoteTokenCategory.BTC, t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTickersByQuoteTokenSymbol() {        asyncRequestClient.getTickersByQuoteTokenSymbol("VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Test    public void getTickersBySymbols() {        asyncRequestClient.getTickersBySymbols("GRIN-000_VITE", t -> {            logger.info("success:{},data:{}", t.succeeded(), t.getData());        });        try {            TimeUnit.SECONDS.sleep(30);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}